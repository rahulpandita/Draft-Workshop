---
layout: post
title:  "Partial Program Synthesis"
date:   2015-09-22 16:00:00
categories: Review
---

Automated program synthesis has far reaching implications.
First, it holds potential for easing the task of a developer by taking care of syntactic aspect (mechanical) of programming i.e. program generation
and allowing the developer to concentrate on semantic aspects (creative) of programing i.e. design related tasks.
Second, synthesized programs (ideally) should be correct by construction.
Finally, owing to mechanical nature of synthesis, the task of programming itself would be reproducable independent of the underlying programming languages infrastructure.
However, little work is done in this area owing to the difficulty of the problem.

Recently there has been some exciting work[1–8, 13–15] in this direction. Srivastava et. al. [2, 4, 5, 13, 14] addresses the problem by leveraging specifications in the form of pre/post conditions and invariant to achieve synthesis. There is also some work [3, 6–8, 15] in literature that addresses the problem of program synthesis by leveraging the state of the art constraint solving.

However, there is disconnect between the synthesis achieved by these approaches and inputs required by them to achieve synthesis. Most of these approaches accept either precise formal specifications in the form of pre-post conditions or extensive input-output data. The synthesis achieved providing input-output relationships is sensitive to the the input data provided. In contrast, precise formal specifications while highly desirable, are rarely found in practice. Even the formal requirements and design documents of almost all of the projects are invariably mixed with natural language sentences.

Furthermore, in practice developer might find it significant overhead to write down precise formal description of a target program. In contrast, developers routinely write semi-formal specifications such as natural language description of what the program achieves in various documents. We plan to leverage these semi-formal specifications to achieve partial program synthesis. Our work is motivated by the insights provided by Ko et. al [9], that conceptual knowledge of an API helps a developer to formulate the steps required to perform a programming task independent of programming language of intended implementation. Our work is targeted towards such users.

There are existing approaches [10–12] that generate natural language description from the method implementation. In this paper we present techniques to achieve the opposite. In particular, we cast the problem of code synthesis from the natural language description, into the problem of information retrieval from the existing natural language descriptions. However, while doing so we face following challenges:


1. existing natural language descriptions are very abstract mostly high level API documents and some code comments, thus only providing partial information which needs augmentation.
2. natural language description of a target method implementation might be specific to a project, thus care needs to be taken to understand context of the project.

Following will be the main contributions of this work:


1. A new approach towards program synthesis.
2. Prototype implementation of our approach.
3. Evaluation of the approach on open source projects.

####Problem Definition

This work address the following problem :
*Given the source code of a software `S`, a natural language description `d` of an unimplemented method `M`, `M`’s signature, and location of `M` in `S`; automatically synthesize the implementation of `M` consistent with `S`.*

####References

1. S. Gulwani. Automating string processing in spreadsheets using input output examples. In Proc. POPL, 2011.
2. S. Gulwani, S. Jha, A. Tiwari, and R. Venkatesan. Synthesis of loop free programs. In Proc. PLDI, 2011.
3. S. Gulwani, S. Jha, A. Tiwari, and R. Venkatesan. Spreadsheet table transformations from examples. In Proc. PLDI, 2011.
4. S. Gulwani, V. Korthikanti, and A. Tiwari. Synthesizing geometry constructions. In Proc. PLDI, 2011.
5. S. Gulwani, V. Korthikanti, and A. Tiwari. Synthesizing geometry constructions. In Proc. PLDI, 2011.
6. S. Itzhaky, S. Gulwani, N. Immerman, and M. Sagiv. A simple inductive synthesis methodology and its applications. In Proc. OOPSLA, 2010.
7. S. Jha, S. Gulwani, S. Seshia, and A. Tiwari. Synthesizing switching logic for safety and dwell-time requirement. In Proc. ICCPS, 2010.
8. S. Jha, S. Gulwani, S. Seshia, and A. Tiwari. Oracle-guided component-based program synthesis. In Proc. ICSE, 2010.
9. A. J. Ko and Y. Riche. The role of conceptual knowledge in API usability. IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC), 2011.
10. G. Sridhara, E. Hill, D. Muppaneni, L. Pollock, and K. Vijay-Shanker. Towards automatically generating summary comments for java methods. In Proc. 25th ASE, 2010.
11. G. Sridhara, L. Pollock, and K. Vijay-Shanker. Generating parameter comments and integrating with method summaries. In Proc. 19th ICPC, 2011.
12. G. Sridhara, L. Pollock, and K. Vijay-Shanker. Automatically detecting and describing high level actions within methods. In Proc. 33rd ICSE, 2011.
13. S. Srivastava, S. Gulwani, and J. S. Foster. From program verification to program synthesis. In Proc. 37th POPL, pages 313–326, January 2010.
14. S. Srivastava, S. Gulwani, S. Chaudhuri, and J. Foster. Path-based inductive synthesis for program inversion. In Proc. PLDI, 2011.
15. A. Taly, S. Gulwani, and A. Tiwari. Synthesizing switching logic using constraint solving. In Proc. VMCAI, 2009.